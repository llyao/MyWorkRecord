// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestP.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace NetProto {

  #region Enums
  /// <summary>
  /// 注释枚举1
  /// </summary>
  public enum TestEnum {
    /// <summary>
    /// 注释枚举1
    /// </summary>
    One = 0,
    /// <summary>
    /// 注释枚举2
    /// </summary>
    Two = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 注释枚举12222222222
  /// </summary>
  public sealed class Test : pb::IMessage {
    private static readonly pb::MessageParser<Test> _parser = new pb::MessageParser<Test>(() => new Test());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test> Parser { get { return _parser; } }

    /// <summary>Field number for the "TestInt32" field.</summary>
    public const int TestInt32FieldNumber = 1;
    private int testInt32_;
    /// <summary>
    ///注释测试1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TestInt32 {
      get { return testInt32_; }
      set {
        testInt32_ = value;
      }
    }

    /// <summary>Field number for the "TestFloat64" field.</summary>
    public const int TestFloat64FieldNumber = 2;
    private float testFloat64_;
    /// <summary>
    ///注释测试2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TestFloat64 {
      get { return testFloat64_; }
      set {
        testFloat64_ = value;
      }
    }

    /// <summary>Field number for the "TestEnum" field.</summary>
    public const int TestEnumFieldNumber = 3;
    private global::NetProto.TestEnum testEnum_ = 0;
    /// <summary>
    ///注释测试3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TestEnum TestEnum {
      get { return testEnum_; }
      set {
        testEnum_ = value;
      }
    }

    /// <summary>Field number for the "TestEnumXX" field.</summary>
    public const int TestEnumXXFieldNumber = 5;
    private static readonly pb::FieldCodec<global::NetProto.TestEnum> _repeated_testEnumXX_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::NetProto.TestEnum) x);
    private readonly pbc::RepeatedField<global::NetProto.TestEnum> testEnumXX_ = new pbc::RepeatedField<global::NetProto.TestEnum>();
    /// <summary>
    ///注释测试4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.TestEnum> TestEnumXX {
      get { return testEnumXX_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TestInt32 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TestInt32);
      }
      if (TestFloat64 != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TestFloat64);
      }
      if (TestEnum != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TestEnum);
      }
      testEnumXX_.WriteTo(output, _repeated_testEnumXX_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TestInt32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestInt32);
      }
      if (TestFloat64 != 0F) {
        size += 1 + 4;
      }
      if (TestEnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TestEnum);
      }
      size += testEnumXX_.CalculateSize(_repeated_testEnumXX_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TestInt32 = input.ReadInt32();
            break;
          }
          case 21: {
            TestFloat64 = input.ReadFloat();
            break;
          }
          case 24: {
            testEnum_ = (global::NetProto.TestEnum) input.ReadEnum();
            break;
          }
          case 42:
          case 40: {
            testEnumXX_.AddEntriesFrom(input, _repeated_testEnumXX_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class haha : pb::IMessage {
    private static readonly pb::MessageParser<haha> _parser = new pb::MessageParser<haha>(() => new haha());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<haha> Parser { get { return _parser; } }

    /// <summary>Field number for the "TestInt32" field.</summary>
    public const int TestInt32FieldNumber = 5;
    private int testInt32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TestInt32 {
      get { return testInt32_; }
      set {
        testInt32_ = value;
      }
    }

    /// <summary>Field number for the "TestFloat64" field.</summary>
    public const int TestFloat64FieldNumber = 6;
    private float testFloat64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TestFloat64 {
      get { return testFloat64_; }
      set {
        testFloat64_ = value;
      }
    }

    /// <summary>Field number for the "TestEnum" field.</summary>
    public const int TestEnumFieldNumber = 7;
    private global::NetProto.TestEnum testEnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TestEnum TestEnum {
      get { return testEnum_; }
      set {
        testEnum_ = value;
      }
    }

    /// <summary>Field number for the "TestEnumXX" field.</summary>
    public const int TestEnumXXFieldNumber = 9;
    private static readonly pb::FieldCodec<global::NetProto.Test> _repeated_testEnumXX_codec
        = pb::FieldCodec.ForMessage(74, global::NetProto.Test.Parser);
    private readonly pbc::RepeatedField<global::NetProto.Test> testEnumXX_ = new pbc::RepeatedField<global::NetProto.Test>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.Test> TestEnumXX {
      get { return testEnumXX_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TestInt32 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TestInt32);
      }
      if (TestFloat64 != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(TestFloat64);
      }
      if (TestEnum != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TestEnum);
      }
      testEnumXX_.WriteTo(output, _repeated_testEnumXX_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TestInt32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestInt32);
      }
      if (TestFloat64 != 0F) {
        size += 1 + 4;
      }
      if (TestEnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TestEnum);
      }
      size += testEnumXX_.CalculateSize(_repeated_testEnumXX_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 40: {
            TestInt32 = input.ReadInt32();
            break;
          }
          case 53: {
            TestFloat64 = input.ReadFloat();
            break;
          }
          case 56: {
            testEnum_ = (global::NetProto.TestEnum) input.ReadEnum();
            break;
          }
          case 74: {
            testEnumXX_.AddEntriesFrom(input, _repeated_testEnumXX_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
